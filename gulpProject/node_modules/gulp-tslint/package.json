{
  "name": "gulp-tslint",
  "preferGlobal": false,
  "version": "3.3.0-beta",
  "author": {
    "name": "Panu Horsmalahti",
    "email": "panu.horsmalahti@iki.fi"
  },
  "description": "TypeScript linter Gulp plugin",
  "contributors": [
    {
      "name": "Panu Horsmalahti",
      "email": "panu.horsmalahti@iki.fi"
    }
  ],
  "main": "index.js",
  "repository": {
    "type": "git",
    "url": "https://github.com/panuhorsmalahti/gulp-tslint.git"
  },
  "keywords": [
    "gulp",
    "typescript",
    "plugin",
    "ts",
    "gulpplugin",
    "gulpfriendly",
    "tslint",
    "linter",
    "lint"
  ],
  "dependencies": {
    "gulp-util": "~3.0.4",
    "map-stream": "~0.1.0",
    "rcloader": "~0.1.4",
    "through": "~2.3.7",
    "tslint": "~2.5.0-beta"
  },
  "analyze": true,
  "devDependencies": {},
  "license": "MIT",
  "engines": {
    "node": ">=0.10"
  },
  "scripts": {
    "test": "node test/tests.js"
  },
  "readme": "gulp-tslint\n===========\n\n[![Build Status](https://travis-ci.org/panuhorsmalahti/gulp-tslint.svg?branch=master)](https://travis-ci.org/panuhorsmalahti/gulp-tslint)\n[![Dependency Status](https://david-dm.org/panuhorsmalahti/gulp-tslint.svg)](https://david-dm.org/panuhorsmalahti/gulp-tslint)\n\nTypeScript linter plugin for Gulp.\n\n\nFirst install gulp-tslint\n```shell\nnpm install --save-dev gulp-tslint\n```\n\n\nUsage:\n```javascript\nconst tslint = require('gulp-tslint');\n\ngulp.task('tslint', function(){\n      return gulp.src('source.ts')\n        .pipe(tslint())\n        .pipe(tslint.report('verbose'));\n});\n```\n\n**tslint.json** is attempted to be read from near the input file.\nIt **must be available** or supplied directly through the options.\n\nThe output (stringified JSON) is added to file.tslint.output.\nYou can output the errors by using reporters.\nThere are four default reporters:\n* 'json' prints stringified JSON to console.log.\n* 'prose' prints short human-readable failures to console.log.\n* 'verbose' prints longer human-readable failures to console.log.\n* 'full' is like verbose, but displays full path to the file\n\nReporters are executed only if there is at least one failure.\n\nIf there is at least one failure a PluginError is\nemitted after execution of the reporters:\n```javascript\n[gulp] Error in plugin 'gulp-tslint': Failed to lint: input.ts\n```\n\nYou can prevent emiting the error by setting emitError in report options to false.\n\n```javascript\ngulp.task('invalid-noemit', function(){\n    return gulp.src('input.ts')\n        .pipe(tslint())\n        .pipe(tslint.report('prose', {\n          emitError: false\n        }));\n});\n```\n\nYou can use your own reporter by supplying a function.\n```javascript\n/* output is in the following form:\n * [{\n *   \"name\": \"invalid.ts\",\n *   \"failure\": \"missing whitespace\",\n *   // Lines and characters start from 0\n *   \"startPosition\": {\"position\": 8, \"line\": 0, \"character\": 8},\n *   \"endPosition\": {\"position\": 9, \"line\": 0, \"character\": 9},\n *   \"ruleName\": \"one-line\"\n * }]\n */\nconst testReporter = function (output, file, options) {\n    // file is a reference to the vinyl File object\n    console.log(\"Found \" + output.length + \" errors in \" + file.path);\n    // options is a reference to the reporter options, e.g. including the emitError boolean\n};\n\ngulp.task('invalid-custom', function(){\n    return gulp.src('input.ts')\n        .pipe(tslint())\n        .pipe(tslint.report(testReporter));\n});\n```\n\ntslint.json can be supplied as a parameter by setting the configuration property.\n```javascript\ngulp.task('tslint-json', function(){\n    return gulp.src('input.ts')\n        .pipe(tslint({\n            configuration: {\n              rules: {\n                \"class-name\": true,\n                // ...\n              }\n            }\n        }))\n        .pipe(tslint.report('prose'));;\n});\n```\n\nReport limits\n-------------\n\nYou can optionally specify a report limit in the .report options that will turn off reporting for files after the limit has been reached. If the limit is 0 or less, the limit is ignored, which is the default setting.\n\n```javascript\ngulp.task('tslint', function(){\n    return gulp.src(['input.ts',])\n        .pipe(tslint())\n        .pipe(tslint.report('prose', {\n            reportLimit: 2\n        }));\n});\n```\n\nSpecifying the tslint module\n----------------------------\n\nIf you want to use a different version of tslint, you can supply it with the `tslint` option.\n\n```bash\nnpm install tslint@next\n```\n\n```javascript\n.pipe(tslint({\n    tslint: require('tslint')\n}))\n```\n\nAll default tslint options\n--------------------------\n\n```javascript\nconst tslintOptions = {\n    configuration: {},\n    rulesDirectory: null,\n    tslint: null\n};\n```\n\nAll default report options\n--------------------------\n\n```javascript\nconst reportOptions = {\n    emitError: true,\n    reportLimit: 0\n};\n```\n\nDevelopment\n===========\n\nFork this repository, run npm install and send pull requests.\n",
  "readmeFilename": "README.md",
  "bugs": {
    "url": "https://github.com/panuhorsmalahti/gulp-tslint/issues"
  },
  "_id": "gulp-tslint@3.3.0-beta",
  "dist": {
    "shasum": "e26013fb9b1e1f306af2342dde4b6a1dc7adfb94"
  },
  "_from": "gulp-tslint@",
  "_resolved": "https://registry.npmjs.org/gulp-tslint/-/gulp-tslint-3.3.0-beta.tgz"
}
