{
  "name": "pathematics",
  "version": "0.1.1",
  "description": "Parse urls and with Express-like url segments",
  "main": "index.js",
  "directories": {
    "test": "test"
  },
  "scripts": {
    "test": "mocha test/"
  },
  "repository": {
    "type": "git",
    "url": "https://github.com/scottcorgan/pathematics.git"
  },
  "keywords": [
    "path",
    "segements",
    "url",
    "wildcard",
    "route"
  ],
  "author": {
    "name": "Scott Corgan"
  },
  "license": "MIT",
  "bugs": {
    "url": "https://github.com/scottcorgan/pathematics/issues"
  },
  "homepage": "https://github.com/scottcorgan/pathematics",
  "dependencies": {
    "pathetic": "~0.3.1",
    "reverend": "~0.2.0"
  },
  "devDependencies": {
    "mocha": "~1.18.2",
    "chai": "~1.9.1"
  },
  "readme": "# pathematics\n\nParse urls and with Express-like url segments\n\n## Install\n\n```\nnpm install pathematics --save\n```\n\n## Usage\n\nEach segement in the source key of the map is injected into the destination value of the map. The map determins which key/value pair to use by comparing the url passed into the method with the map keys.\n\n```js\nvar pathematics = require('pathematics');\nvar routesMap = {\n  '/some/:segemented/route': '/new/route/:segmented'\n};\n\nvar url = pathematics(routesMap, '/some/custom/route');\n\nconsole.log(url); // OUTPUTS: /new/route/custom\n```\n\nYou can also partialize the function to reuse the object map\n\n```js\nvar pathematics = require('pathematics');\nvar routesMap = {\n  '/some/:segemented/route': '/new/route/:segmented'\n};\n\nvar paths = pathematics(routesMap);\nvar url = paths('/some/custom/route');\n\nconsole.log(url); // OUTPUTS: /new/route/custom\n```\n\nParseing route segements with custom meta data is also available. If the value if the key/value pair in the object map is an object, it expects the parameter of `url` to define the target path with segements.\n\n```js\nvar pathematics = require('pathematics');\nvar routesMap = {\n  '/some/:segemented/route': {\n    url: '/new/route/:segmented',\n    metaData: 'something'\n  }\n};\n\nvar data = pathematics.withMeta(routesMap, '/some/custom/route');\n\nconsole.log(data);\n\n/*\nOUTPUTS:\n\n{\n  url: '/new/route/custom',\n  meta: {\n    url: '/new/route/:segmented',\n    metaData: 'something'\n  }\n}\n*/\n```\n\n## API\n\n### pathematics(objectMap[, url]);\n\nGenerates the parsed url with segments if the url is provided or returns a parsing funciton if no url is provided initially.\n\n* `objectMap` - and object with key values pairs that define routes with segments to match against\n* `url` - the url to compare and parse with the `objectMap`\n\n### pathematics.withMeta(objectMap[, url]);\n\nAllows you to pass optional meta data around with route segements with the object map.\n\n## Run Tests\n\n```\nnpm install\nnpm test\n```",
  "readmeFilename": "README.md",
  "_id": "pathematics@0.1.1",
  "_from": "pathematics@^0.1.1"
}
