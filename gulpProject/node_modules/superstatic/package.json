{
  "name": "superstatic",
  "version": "1.2.3",
  "description": "Superstatic: a static file server for fancy apps",
  "main": "lib",
  "scripts": {
    "test": "npm run lint && npm run test-unit",
    "test-unit": "mocha test",
    "lint": "jshint ./lib",
    "outdated": "npm outdated --depth 0",
    "audit": "npm shrinkwrap --dev && nsp audit-shrinkwrap || true && rm npm-shrinkwrap.json",
    "bench": "wrk -t1 -c400 -d30s http://localhost:3474"
  },
  "bin": {
    "superstatic": "bin/server",
    "ss": "bin/server"
  },
  "repository": {
    "type": "git",
    "url": "https://github.com/divshot/superstatic.git"
  },
  "keywords": [
    "static",
    "server",
    "divshot",
    "hosting",
    "pushstate",
    "html5",
    "router",
    "file",
    "directory",
    "hash",
    "hashbang"
  ],
  "author": {
    "name": "Divshot"
  },
  "license": "MIT",
  "bugs": {
    "url": "https://github.com/divshot/superstatic/issues"
  },
  "dependencies": {
    "async": "0.9.0",
    "broker": "1.0.1",
    "cache-control": "1.0.3",
    "caseless": "^0.9.0",
    "chalk": "^1.0.0",
    "clean-urls": "1.1.5",
    "compression": "^1.4.1",
    "connect": "^3.3.4",
    "connect-query": "0.2.0",
    "fast-url-parser": "^1.0.6-0",
    "feedback": "0.3.2",
    "file-exists": "0.1.1",
    "lodash": "^2.4.1",
    "mime-types": "^2.0.9",
    "minimist": "1.1.0",
    "mix-into": "0.4.0",
    "morgan": "^1.5.1",
    "nash": "0.5.2",
    "not-found": "1.0.1",
    "pretty-print": "1.0.0",
    "qs": "2.3.3",
    "redirects": "^1.1.0",
    "serve-favicon": "^2.2.0",
    "set-headers": "1.0.0",
    "slasher": "^1.1.0",
    "slashify": "1.0.0",
    "stacked": "1.1.1",
    "static-router": "1.1.0",
    "update-notifier": "0.2.2",
    "van": "0.0.4"
  },
  "devDependencies": {
    "args-list": "^0.3.2",
    "chai": "^2.1.0",
    "clone": "^1.0.0",
    "fs-extra": "^0.16.3",
    "jshint": "^2.6.0",
    "knox": "^0.9.1",
    "minimatch": "^2.0.1",
    "mkdirp": "^0.5.0",
    "mocha": "^2.0.1",
    "mocksy": "^1.0.0",
    "nsp": "^1.0.0",
    "request": "^2.48.0",
    "rmdir": "^1.1.0",
    "serve-static": "^1.3.2",
    "sinon": "^1.12.1",
    "supertest": "^0.15.0"
  },
  "jshintConfig": {
    "expr": true,
    "curly": false,
    "eqeqeq": true,
    "immed": true,
    "latedef": false,
    "newcap": true,
    "noarg": true,
    "sub": true,
    "undef": true,
    "unused": false,
    "boss": true,
    "eqnull": true,
    "node": true,
    "laxbreak": true,
    "globals": {
      "require": true,
      "module": true,
      "exports": true,
      "it": true,
      "describe": true,
      "beforeEach": true,
      "afterEach": true,
      "chai": true,
      "Regex": true
    }
  },
  "readme": "# Superstatic   [![NPM Module](http://img.shields.io/npm/v/superstatic.svg?style=flat-square)](https://npmjs.org/package/superstatic) [![Build Status](http://img.shields.io/travis/divshot/superstatic.svg?style=flat-square)](https://travis-ci.org/divshot/superstatic) [![Code Climate](http://img.shields.io/codeclimate/github/divshot/superstatic.svg?style=flat-square)](https://codeclimate.com/github/divshot/superstatic)\n\nSuperstatic is an enhanced static web server that was built to power\n[Divshot](http://www.divshot.io). It has fantastic support for HTML5\npushState applications, clean URLs, caching, and MANY other goodies.\n\n## Documentation\n\n* [Installation](#installation)\n* [Usage](#usage)\n* [Configuration](#configuration)\n* [Services](#services)\n* [API](#api)\n* [Run Tests](#run-tests)\n* [Changelog](https://github.com/divshot/superstatic/releases)\n* [Contributing](#contributing)\n\n## Installation\n\nSuperstatic should be installed globally using npm:\n\n```\n$ npm install -g superstatic\n```\n    \n## Usage\n\nBy default, Superstatic will simply serve the current directory on port\n3474. This works just like any other static server:\n\n```\n$ superstatic\n```\n\nor aliased as\n\n```\n$ ss\n```\n    \nYou can optionally specify the directory, port and hostname of the server:\n\n```\n$ superstatic public --port 8080 --host 127.0.0.1\n```\n    \nWhere it gets interesting is with Superstatic's JSON configuration file.\n\n## Configuration\n\nSuperstatic reads special configuration from a JSON file (either `superstatic.json`\nor `divshot.json` by default, configurable with `-c`). This JSON file enables\nenhanced static server functionality beyond simply serving files.\n\n**root:** by default, Superstatic will serve the current working directory (or the\nancestor of the current directory that contains the configuration json being used).\nThis configuration key specifies a directory *relative to the configuration file* that\nshould be served. For example, if serving a Jekyll app, this might be set to `\"_site\"`.\nA directory passed as an argument into the command line app supercedes this configuration\ndirective.\n\n**clean_urls:** if `true`, all `.html` files will automatically have their extensions\ndropped. If `.html` is used at the end of a filename, it will perform a 301 redirect\nto the same path with `.html` dropped.\n\nAll paths have clean urls\n\n```json\n{\n  \"clean_urls\": true\n}\n```\n\nOnly specific paths get clean urls\n\n```json\n{\n  \"clean_urls\": [\"/app**\", \"!/components**\"]\n}\n```\n\n**routes:** you can specify custom route recognition for your application by supplying\nan object to the routes key. Use a single star `*` to replace one URL segment or a\ndouble star to replace an arbitrary piece of URLs. This works great for single page\napps. An example:\n\n```json\n{\n  \"routes\": {\n    \"app/**\":\"application.html\",\n    \"projects/*/edit\":\"projects.html\"\n  }\n}\n```\n\n**redirects:** you can specify to have certain url paths be redirected (specifying a custom http status code, or which defaults to 301) to other url paths by supplying an object to the `redirects` key. Route path matching is similar to using custom routes. For example:\n\nDefault 301 redirect\n\n```json\n{\n  \"redirects\": {\n    \"/some/old/path\": \"/some/new/path\"\n  }\n}\n```\n\nCustom http status code\n\n```json\n{\n  \"redirects\": {\n    \"/some/old/path\": {\n      \"status\": 302,\n      \"url\": \"/some/new/path\"\n    }\n  }\n}\n```\n\nRoute segments are also supported in the redirects configuration. Segmented redirects also support custom status codes (see above):\n\n```json\n{\n  \"redirects\": {\n    \"/old/:segment/path\": \"/new/path/:segment\"\n  }\n}\n```\n\nIn this example, `/old/custom-segment/path` redirect to `/new/path/custom-segment`\n\n**error_page:** the path to the page that you want to render 404 errors if an unrecognized\nURL is supplied. For example, `error.html`.\n\n**cache_control:** by default, all pages served by superstatic have cache control headers set at\n1 hour. To change them, you can supply an object containing file globs and ages (in seconds).\nYou can also specify `false` to indicate that no caching should be performed, and a string to\nmanually set the cache control header. An example:\n\n```json\n{\n  \"cache_control\": {\n    \"nocache/**\": false,\n    \"**/*.html\": 600,\n    \"private/**\": \"private, max-age=1200\"\n  }\n}\n```\n\nNote that you can pass the `--no-cache` option when you run the server to serve all content\nwithout caching. This is good to use during development when you want fresh content served\non each request.\n\n**Headers:** Superstatic allows you to set the response headers for the given routing configuration.\n\n```json\n{\n  \"headers\": {\n    \"/cors-stuff/**\": {\n      \"Access-Control-Allow-Origin\": \"*\"\n    },\n    \"/scripts/**\": {\n      \"content-type\": \"text/javascript\"\n    }\n  }\n}\n```\n\n## Services\n\n**Services** are extensions that provide additional functionality. More TBD.\n\n## API\n\nThe Superstatic server is just an extended version of the [Connect](http://www.npmjs.org/package/connect) server. This means you can use any custom middlewares you like that work with Connect.\n\n### superstatic([options])\n\n```js\nvar superstatic = require('superstatic');\n\nvar app = superstatic(/* server options */);\n\napp.listen(function (err) {\n  // Server started\n});\n```\n\n#### Server Options *(all values are optional)*\n\n* **port:** Port to run the server on. Defaults to `3474`\n* **host:** Host to run the server on. Defaults to `127.0.0.1` (localhost)\n* **logger:** Provide custom logging functions. The three logging functions used are `info`, `warn`, and `error`. By default, these are printed to *stdout*. You can provide custom functions to log to 3rd party log services such as [Papertrail](https://papertrailapp.com/) use the NPM module [Winston](https://github.com/kenperkins/winston-papertrail). For example:\n\n```js\nvar superstatic = require('superstatic');\nvar app = superstatic({\n  logger: {\n    info: function (msg) {\n      console.log('Info:', msg);\n    },\n    error: function (msg) {\n      console.error('Error:', msg);\n    }\n  }\n});\n```\n\n* **config:** override defaults in the [configuration file](#configuration). This can either be a string with the name of the config file (e.g. `superstatic.json`), or it can be an object containing the values that would normally be in a config file. If an object is passed, it will override any values in the config file. For example:\n\n```js\nvar Server = require('superstatic');\n\nvar server = superstatic({\n  config: require('config_file.json')\n});\n\n// OR\n\nvar server = superstatic({\n  config: 'config_file.json'\n});\n```\n\n* **cwd:** the current working directly that you want to serve files from. Defaults to the current directory via `process.cwd()`\n* **localEnv:** an object containing values that are available to your app with when you add the script `<script src=\"/__/env.js\"></script>` to your app. See [Using Environment Varaiables in Your App](http://docs.divshot.com/guides/environment-variables)\n* **debug:** `true` or `false`. Enable or disable the output to the console for network requests. Defaults to `true` \n\n## Server Instance methods\n\n### listen([port, host, callback])\n\nStart the server. Returns and instance of [`http.createServer`](http://nodejs.org/api/http.html#http_http_createserver_requestlistener). All arguments are optional\n\n* **port:** port for server to listen on. Defaults to `3474` and is overridden by the port in server options\n* **host:** server host Defaults to `127.0.0.1` and is overridden by the host in server options\n* **callback:** gets called once the server starts. Gets passed an error argument if there is an error.\n\n### close(callback)\n\nStops the server and close all connections\n\n* **callback:** gets called once the server stops. Gets passed an error argument if there is an error.\n\n**Note:** Since Superstatic uses Connect, any instance methods availble on a Connect instance are available on the Superstatic instance.\n\n## Run Tests\n\nIn superstatic module directory:\n\n```\nnpm install\nnpm test\n```\n\n## Contributing\n\nWe LOVE open source and open source contributors. If you would like to contribute to Superstatic, please review our [contributing guidelines](https://github.com/divshot/superstatic/blob/master/CONTRIBUTING.md) before your jump in and get your hands dirty.\n",
  "readmeFilename": "README.md",
  "_id": "superstatic@1.2.3",
  "_from": "superstatic@"
}
